variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd`are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

stages:
  - build
  - test
  - docker_build
  - deploy
  
# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_REF_NAME"'
cache:
  paths:
    - .m2/repository

# This will only validate and compile stuff and run e.g. maven-enforcer-plugin.
# Because some enforcer rules might check dependency convergence and class duplications
# we use `test-compile` here instead of `validate`, so the correct classpath is picked up.
.validate: &validate
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS test-compile'

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
  except:
    - master

# Validate merge requests using JDK8
validate:jdk8:
  <<: *validate
  image: maven:3.3.9-jdk-8
  tags:
    - docker

# Verify merge requests using JDK8
verify:jdk8:
  <<: *verify
  image: maven:3.3.9-jdk-8
  tags:
    - docker


# For `master` branch run `mvn deploy` automatically.
# Here you need to decide whether you want to use JDK7 or 8.
# To get this working you need to define a volume while configuring your gitlab-ci-multi-runner.
# Mount your `settings.xml` as `/root/.m2/settings.xml` which holds your secrets.
# See https://maven.apache.org/settings.html
deploy:jdk8:
  # Use stage test here, so the pages job may later pickup the created site.
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS package'
  only:
    - master
  # Archive up the built documentation site.
  artifacts:
    paths:
    - target/staging
    - target/*.jar
    - target/apidocs
  image: maven:3.3.9-jdk-8
  tags:
    - docker


build_docker_image:
  image: docker
  stage: docker_build
  script:
    - 'docker login -u gitlab-ci-token -p $CI_JOB_TOKEN git.yunbaoguan.cn:5005'
    - 'docker build -t git.yunbaoguan.cn:5005/zhijian/passport/ppbe/image:$CI_PIPELINE_ID .'
    - 'docker push git.yunbaoguan.cn:5005/zhijian/passport/ppbe/image:$CI_PIPELINE_ID'
  only:
    - master@zhijian/passport/ppbe
  tags:
    - image

deploy_dev:
  image: docker
  stage: deploy
  environment:
    name: dev
    url: 'http://192.168.3.146:8082'
  script:
    - 'git clone http://gitlab-ci-token:$CI_JOB_TOKEN@git.yunbaoguan.cn/devops/environment.git || (cd environment; git pull)'
    - 'source environment/ppbe/test/env.sh'
    - 'docker -H 192.168.3.146 login -u gitlab-ci-token -p $CI_JOB_TOKEN git.yunbaoguan.cn:5005'
    - 'docker -H 192.168.3.146 pull git.yunbaoguan.cn:5005/zhijian/passport/ppbe/image:$CI_PIPELINE_ID || true'
    - 'docker -H 192.168.3.146 stop ppbe || true'
    - 'docker -H 192.168.3.146 rm ppbe || true'
    - 'docker -H 192.168.3.146 run -d -p 8082:8080 -p 8083:8081 -v /opt/ppbe:/target --name ppbe 
                                        -e BACKEND_ENDPOINT=$BACKEND_ENDPOINT
                                        -e FRONTEND_URL=$FRONTEND_URL
                                        -e JDBC_DRIVER=$JDBC_DRIVER 
                                        -e JDBC_USER=$JDBC_USER 
                                        -e JDBC_PASSWORD=$JDBC_PASSWORD 
                                        -e JDBC_URL=$JDBC_URL 
                                        -e DB_CONTEXT=test
                                        git.yunbaoguan.cn:5005/zhijian/passport/ppbe/image:$CI_PIPELINE_ID'
  only:
    - master@zhijian/passport/ppbe
  tags:
    - shell

deploy_prod:
  stage: deploy 
  environment:
    name: prod
    url: 'https://ppbe.yunbaoguan.cn'
  before_script:
    - 'eval $(ssh-agent -s)'
    - 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
    - 'mkdir -p ~/.ssh'
    - 'echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - 'git clone http://gitlab-ci-token:$CI_JOB_TOKEN@git.yunbaoguan.cn/devops/environment.git || (cd environment; git pull)'
    - 'source environment/ppbe/prod/env.sh'
    - 'docker login -u gitlab-ci-token -p $CI_JOB_TOKEN git.yunbaoguan.cn:5005'
    - 'docker pull git.yunbaoguan.cn:5005/zhijian/passport/ppbe/image:$CI_PIPELINE_ID'
    - 'if [ "$(ssh deployer@ppbe.yunbaoguan.cn docker images -q git.yunbaoguan.cn:5005/zhijian/passport/ppbe/image:$CI_PIPELINE_ID)" = "" ];
      then 
        echo Not Exists, Uploading; 
        docker save git.yunbaoguan.cn:5005/zhijian/passport/ppbe/image:$CI_PIPELINE_ID | bzip2 | pv -F "%t %b %r" -f -i 5 | ssh deployer@ppbe.yunbaoguan.cn "bunzip2 | docker load";
      else
        echo Image Exists, Skipping Upload; 
      fi'
    - 'ssh deployer@ppbe.yunbaoguan.cn "( docker stop ppbe ; docker rm ppbe ) || true"'
    - 'ssh deployer@ppbe.yunbaoguan.cn "docker run -d --restart=always --name=ppbe 
                                        -e VIRTUAL_HOST=ppbe.yunbaoguan.cn 
                                        -e LETSENCRYPT_HOST=ppbe.yunbaoguan.cn 
                                        -e LETSENCRYPT_EMAIL=kmtong@yunbaoguan.cn 
                                        -e BACKEND_ENDPOINT=$BACKEND_ENDPOINT
                                        -e FRONTEND_URL=$FRONTEND_URL
                                        -e JDBC_DRIVER=$JDBC_DRIVER 
                                        -e JDBC_USER=$JDBC_USER 
                                        -e JDBC_PASSWORD=$JDBC_PASSWORD 
                                        -e JDBC_URL=$JDBC_URL 
                                        git.yunbaoguan.cn:5005/zhijian/passport/ppbe/image:$CI_PIPELINE_ID"'
  only:
    - master@zhijian/passport/ppbe
  tags:
    - shell
  when: manual

